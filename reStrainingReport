#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long;
use FindBin qw($RealBin);
use lib "$RealBin/../lib";

## This program is Copyright (C) 2018-19, Felix Krueger (felix.krueger@babraham.ac.uk)

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.

my $report_version = 'v0.1.0';
my (@reStrainingOrder_summary_reports);

my ($output_dir,$verbose,$manual_output_file,$candidates) = process_commandline();

# print join (",",@alignment_reports)."\n";
# print join (",",@dedup_reports)."\n";
# print join (",",@splitting_reports)."\n";
# print join (",",@mbias_reports)."\n";
# print join (",",@nuc_reports)."\n";

my %strain_scores;
my %hybrid_scores;
my %allele_ratios;


while (@reStrainingOrder_summary_reports){
	# clearing
  	%strain_scores = ();
  	%hybrid_scores = ();
  	%allele_ratios = ();


  	my $summary_report = shift @reStrainingOrder_summary_reports;

   	### HTML OUTPUT FILE
    	my $report_output = $summary_report;
    	$report_output =~ s/^.*\///; # deleting optional path information
    	$report_output =~ s/\.txt$//;
    	$report_output =~ s/$/.html/;

    	# if -o output_file was specified we are going to use that name preferentially.
    	# This may only happen if there is a single report in the folder, or if a single report has been specified manually
    	if ($manual_output_file){
        	warn "A specific output filename was specified: $manual_output_file. Using that one instead of deriving the filename\n"; sleep(1);
        	$report_output = $manual_output_file;
    	}
    
    	$report_output = $output_dir.$report_output;
    	warn "\nWriting reStrainingOrder HTML report to >> $report_output <<\n\n";
    
    	# Get the report template into a string
    	my $doc = read_report_template('plotly_template.tpl');
    
        $doc =~ s/\{\{report_version\}\}/$report_version/g;


    my $logo = read_report_template('reStrainingOrder.logo');
    if ($doc =~ s/\{\{logo_goes_here\}\}.*\{\{logo_goes_here\}\}/$logo/s){  # treating the string as a single line
        warn "reStrainingOrder.logo injection successful!\n" if $verbose;
    }

		my $summary_report_bam_file = $summary_report;
		$summary_report_bam_file =~ s/reStrainingOrder.summary_stats.txt/bam/;
        $doc =~ s/\{\{filename\}\}/$summary_report_bam_file/g;
    	# Get the plot.ly code into a string. This makes the template so much more managable and also allows for quick replacement of the plot.ly
   	# code itself should it get updated
    	my $plotly_code = read_report_template('plot.ly');
    
    	# replacing the Plot.ly spaceholders with the actual plot.ly code
    	if ($doc =~ s/\{\{plotly_goes_here\}\}.*\{\{plotly_goes_here\}\}/$plotly_code/s){  # treating the string as a single line
      	warn "Plot.ly injection successful!\n" if $verbose;
    	}
    	else{
        	die "Plot.ly incjection not working, won't be able to construct any meaningful HTML reports in this case....\n\n";
   	}

  	#my $reStrainingOrder_logo = read_report_template('reStrainingOrder.logo');
  	#if ($doc =~ s/\{\{rSO_logo_goes_here\}\}.*\{\{rSO_logo_goes_here\}\}/$reStrainingOrder_logo/s){  # treating the string as a single line
  	#	    warn "reStrainingOrder.logo injection successful!\n" if $verbose;
  	#}
  
  	my $bioinf_logo = read_report_template('bioinf.logo');
  	if ($doc =~ s/\{\{bioinf_logo_goes_here\}\}.*\{\{bioinf_logo_goes_here\}\}/$bioinf_logo/s){  # treating the string as a single line
      	warn "bioinf.logo injection successful!\n" if $verbose;
  	}


  	# Create timestamp
  	$doc = getLoggingTime($doc);
  
  	# PROCESSING reStrainingOrder SUMMARY REPORTS
  	warn "="x110,"\n";
  	warn "Using the following reStrainingOrder summary report:\t\t> $summary_report <\n";
  	$doc = read_rSO_summary_report($summary_report,$doc);
  
  
  # SPLITTING REPORT (optional)
  #if ($splitting_report){
  #  warn "Using the following splitting report:\t\t> $splitting_report <\n";
  #  $doc =~ s/\{\{cytosine_methylation_post_deduplication_section\}\}//g; # deleting these tags and then go ahead and fill the table
  #  $doc = read_splitting_report($splitting_report,$doc);
  #}
  #else{
  #  warn "No splitting report file specified, skipping this step\n";
    # deleting the entire Splitting Report C context section from the template
  #  $doc =~ s/\{\{cytosine_methylation_post_deduplication_section\}\}.*\{\{cytosine_methylation_post_deduplication_section\}\}//s; # treating the string as a single line
  #}

	################################################
  	### PROCESSING GENERAL STATISTICS
	my $number_of_positions_covered;
	# $number_of_positions_covered   .= "<tr>\n\t<td>Input filename:</td>\n\t<td>$summary_report_bam_file</td>\n</tr>\n";
	$number_of_positions_covered   .= "<tr>\n<td>Different positions on chr1 covered:</td>\n";
		foreach my $number(sort {$a<=>$b} keys %strain_scores){
		$number_of_positions_covered   .= "\t<td>$strain_scores{$number}->{covered}</td>\n";
		$number_of_positions_covered   .= "\t</tr>\n"; 
		last; # only needed once
	}
	
	$doc =~ s/\{\{number_of_positions_covered\}\}/$number_of_positions_covered/g;

  ################################################
  ### PROCESSING SINGLE STRAIN COMPTIBILITY SCORES

 	my $count = 0;
	my $strain_compatibility_content;
  my $strain_scores_strains_plotly;
  my $strain_scores_percentages_plotly;

  $strain_compatibility_content .= "<tbody>\n";
  $strain_compatibility_content .= "\t<tr>\n";
  $strain_compatibility_content .= "\t\t<th>Strain</th>\n";
  $strain_compatibility_content .= "\t\t<th>Agreeing Calls</th>\n";
  $strain_compatibility_content .= "\t\t<th>Disagreeing Calls</th>\n";
  $strain_compatibility_content .= "\t\t<th>Compatibility Percentage</th>\n";  
  $strain_compatibility_content .= "\t</tr>\n";
  $strain_compatibility_content .= "</tbody>\n";
  $strain_compatibility_content .= "<tbody>\n";

  # warn "\n\nContents of \%strain_scores:\n";
  foreach my $number(sort {$a<=>$b} keys %strain_scores){
        $strain_compatibility_content .= "\t<tr>\n";
        $strain_compatibility_content .= "\t\t<td>$strain_scores{$number}->{strain}</td>\n";
        $strain_compatibility_content .= "\t\t<td>$strain_scores{$number}->{agree}</td>\n";
        $strain_compatibility_content .= "\t\t<td>$strain_scores{$number}->{disagree}</td>\n";
        $strain_compatibility_content .= "\t\t<td>$strain_scores{$number}->{percent}</td>\n";
        $strain_compatibility_content .= "\t</tr>\n"; 

        $strain_scores_strains_plotly     .= " '$strain_scores{$number}->{strain}' ,";    
        $strain_scores_percentages_plotly .= " $strain_scores{$number}->{percent} ,";  

      	# warn "$number\t$strain_scores{$number}->{strain}\t$strain_scores{$number}->{covered}\t$strain_scores{$number}->{agree}\t$strain_scores{$number}->{disagree}\t$strain_scores{$number}->{percent}\n";
    	++$count;
    } 

    # remove trailing comma
    $strain_scores_strains_plotly =~ s/,$//;
    $strain_scores_percentages_plotly =~ s/,$//;

    # warn "$strain_scores_strains_plotly\n$strain_scores_percentages_plotly\n"; sleep(5);
    $strain_compatibility_content .= "</tbody>\n";
    # warn "$strain_compatibility_content\n";

    # injecting this into the HTML template
    $doc =~ s/\{\{strain_compatibility_content\}\}/$strain_compatibility_content/g;
    $doc =~ s/\{\{strain_scores_strains_plotly\}\}/$strain_scores_strains_plotly/g;
    $doc =~ s/\{\{strain_scores_percentages_plotly\}\}/$strain_scores_percentages_plotly/g;


    ################################################
    ### PROCESSING SINGLE STRAIN COMPATIBILITY CONFIDENCE
    $count = 0;
  my $strain_compatibility_confidence;

  $strain_compatibility_confidence .= "<tbody>\n";
  $strain_compatibility_confidence .= "\t<tr>\n";
  $strain_compatibility_confidence .= "\t\t<th>Strain</th>\n";
  $strain_compatibility_confidence .= "\t\t<th>Covered Positions</th>\n";
  $strain_compatibility_confidence .= "\t\t<th>Compatibility Percentage</th>\n";  
  $strain_compatibility_confidence .= "\t</tr>\n";
  $strain_compatibility_confidence .= "</tbody>\n";
  $strain_compatibility_confidence .= "<tbody>\n";

  # warn "\n\nContents of \%strain_scores:\n";
  foreach my $number(sort {$a<=>$b} keys %strain_scores){
      last if ($count == $candidates);
        $strain_compatibility_confidence .= "\t<tr>\n";
        $strain_compatibility_confidence .= "\t\t<td>$strain_scores{$number}->{strain}</td>\n";
        $strain_compatibility_confidence .= "\t\t<td>$strain_scores{$number}->{covered}</td>\n";
        $strain_compatibility_confidence .= "\t\t<td>$strain_scores{$number}->{percent}</td>\n";
        $strain_compatibility_confidence .= "\t</tr>\n";      
        # warn "$number\t$strain_scores{$number}->{strain}\t$strain_scores{$number}->{covered}\t$strain_scores{$number}->{agree}\t$strain_scores{$number}->{disagree}\t$strain_scores{$number}->{percent}\n";
      ++$count;
    } 

    $strain_compatibility_confidence .= "</tbody>\n";
    # warn "$strain_compatibility_confidence\n";

    # injecting this into the HTML template
    $doc =~ s/\{\{strain_compatibility_confidence\}\}/$strain_compatibility_confidence/g;

    ##########################################
    ### PROCESSING HYBRID COMPATIBILITY SCORES

    my $hybrid_compatibility_content;
    my $hybrid_compatibility_strains_plotly;
    my $hybrid_percentages_strain1_plotly;
    my $hybrid_percentages_strain2_plotly;

    $hybrid_compatibility_content .= "<tbody>\n";
    $hybrid_compatibility_content .= "\t<tr>\n";
    $hybrid_compatibility_content .= "\t\t<th>Potential Hybrid</th>\n";
    $hybrid_compatibility_content .= "\t\t<th>Agreeing Calls</th>\n";
    $hybrid_compatibility_content .= "\t\t<th>Disagreeing Calls</th>\n";
    $hybrid_compatibility_content .= "\t\t<th>Compatibility %</th>\n";
    
    $hybrid_compatibility_content .= "\t\t<th>Strain1 %</th>\n";
    $hybrid_compatibility_content .= "\t\t<th>Strain2 %</th>\n";  
    
    $hybrid_compatibility_content .= "\t</tr>\n";
    $hybrid_compatibility_content .= "</tbody>\n";
    $hybrid_compatibility_content .= "<tbody>\n";

  
    $count = 0;
    # warn "\n\nContents of \%hybrid_scores:\n";
    foreach my $number(sort {$a<=>$b} keys %hybrid_scores){
      	last if ($count == $candidates);
        $hybrid_compatibility_content .= "\t<tr>\n";
        $hybrid_compatibility_content .= "\t\t<td>$hybrid_scores{$number}->{hybrid}</td>\n";
        $hybrid_compatibility_content .= "\t\t<td>$hybrid_scores{$number}->{agree}</td>\n";
        $hybrid_compatibility_content .= "\t\t<td>$hybrid_scores{$number}->{disagree}</td>\n";
        $hybrid_compatibility_content .= "\t\t<td>$hybrid_scores{$number}->{percent}</td>\n";
        
        $hybrid_compatibility_content .= "\t\t<td>$allele_ratios{$number}->{strain1_percent}</td>\n";
        $hybrid_compatibility_content .= "\t\t<td>$allele_ratios{$number}->{strain2_percent}</td>\n";
        
        $hybrid_compatibility_content .= "\t</tr>\n";    
      	# warn "$number\t$hybrid_scores{$number}->{hybrid}\t$hybrid_scores{$number}->{agree}\t$hybrid_scores{$number}->{disagree}\t$hybrid_scores{$number}->{percent}\n";
      	++$count;
        
        # warn "$hybrid_scores{$number}->{hybrid}\t$hybrid_scores{$number}->{percent}\t$allele_ratios{$number}->{strain1_percent}\t$allele_ratios{$number}->{strain2_percent}\n";
        my $adjusted_s1 = sprintf("%.2f",$hybrid_scores{$number}->{percent} * $allele_ratios{$number}->{strain1_percent} / 100);
        my $adjusted_s2 = sprintf("%.2f",$hybrid_scores{$number}->{percent} * $allele_ratios{$number}->{strain2_percent} / 100);
        #warn "$hybrid_scores{$number}->{hybrid}\t$adjusted_s1\t$adjusted_s2\n";        
        #sleep(1);      	
        $hybrid_compatibility_strains_plotly .= " '$hybrid_scores{$number}->{hybrid}' ,";    
        $hybrid_percentages_strain1_plotly   .= " $adjusted_s1 ,"; 
        $hybrid_percentages_strain2_plotly   .= " $adjusted_s2 ,"; 
    } 

    $hybrid_compatibility_content .= "</tbody>\n";
    # warn "$hybrid_compatibility_content\n";

     # remove trailing comma
    $hybrid_compatibility_strains_plotly =~ s/,$//;
    $hybrid_percentages_strain1_plotly =~ s/,$//;
    $hybrid_percentages_strain2_plotly =~ s/,$//;

    # injecting this into the HTML template
    # For the table
    $doc =~ s/\{\{hybrid_compatibility_content\}\}/$hybrid_compatibility_content/g;
    # For the stacked bar graph
    $doc =~ s/\{\{hybrid_compatibility_strains_plotly\}\}/$hybrid_compatibility_strains_plotly/g;
    $doc =~ s/\{\{hybrid_percentages_strain1_plotly\}\}/$hybrid_percentages_strain1_plotly/g;
    $doc =~ s/\{\{hybrid_percentages_strain2_plotly\}\}/$hybrid_percentages_strain2_plotly/g;

    # warn "$hybrid_compatibility_strains_plotly\n$hybrid_percentages_strain1_plotly\n$hybrid_percentages_strain2_plotly\n";

    ####################################
    ### PROCESSING ALLELE RATIOS SECTION

    my $allelic_ratio_content;
    my $strain_names_ratio_plotly;
    my $strain1_ratio_plotly;
    my $strain2_ratio_plotly;

    $allelic_ratio_content .= "<tbody>\n";
    $allelic_ratio_content .= "\t<tr>\n";
    $allelic_ratio_content .= "\t\t<th>Strain1</th>\n";
    $allelic_ratio_content .= "\t\t<th>Strain1 Calls</th>\n";
    $allelic_ratio_content .= "\t\t<th>Strain1 %</th>\n";
    $allelic_ratio_content .= "\t\t<th>Strain2</th>\n";
    $allelic_ratio_content .= "\t\t<th>Strain2 Calls</th>\n";
    $allelic_ratio_content .= "\t\t<th>Strain2 %</th>\n";  
    $allelic_ratio_content .= "\t</tr>\n";
    $allelic_ratio_content .= "</tbody>\n";
    $allelic_ratio_content .= "<tbody>\n";

    $count = 0;
    # warn "\n\nContents of \%allele_ratios:\n";
    foreach my $number(sort {$a<=>$b} keys %allele_ratios){
    	   last if ($count == $candidates);
    	   # warn "$number\t$allele_ratios{$number}->{strain1}\t$allele_ratios{$number}->{strain2}\t$allele_ratios{$number}->{strain1_count}\t$allele_ratios{$number}->{strain2_count}\t$allele_ratios{$number}->{strain1_percent}\t$allele_ratios{$number}->{strain2_percent}\n";
    	   ++$count;
          $allelic_ratio_content .= "\t<tr>\n";
          $allelic_ratio_content .= "\t\t<td>$allele_ratios{$number}->{strain1}</td>\n";
          $allelic_ratio_content .= "\t\t<td>$allele_ratios{$number}->{strain1_count}</td>\n";
          $allelic_ratio_content .= "\t\t<td>$allele_ratios{$number}->{strain1_percent}</td>\n";
          $allelic_ratio_content .= "\t\t<td>$allele_ratios{$number}->{strain2}</td>\n";
          $allelic_ratio_content .= "\t\t<td>$allele_ratios{$number}->{strain2_count}</td>\n";
          $allelic_ratio_content .= "\t\t<td>$allele_ratios{$number}->{strain2_percent}</td>\n";
          $allelic_ratio_content .= "\t</tr>\n";   

          $strain_names_ratio_plotly .= " '$allele_ratios{$number}->{strain1}/$allele_ratios{$number}->{strain2}' ,"; 
          $strain1_ratio_plotly      .= " $allele_ratios{$number}->{strain1_count} ,";    
          $strain2_ratio_plotly      .= " $allele_ratios{$number}->{strain2_count} ,";
	   } 

	$allelic_ratio_content .= "</tbody>\n";
	# warn "$allelic_ratio_content\n";

	# remove trailing commas
	$strain_names_ratio_plotly =~ s/,$//;
	$strain1_ratio_plotly =~ s/,$//;
	$strain2_ratio_plotly =~ s/,$//;

	# warn "$strain_names_ratio_plotly\n$strain1_ratio_plotly\n$strain2_ratio_plotly\n";

	# injecting this into the HTML template
	$doc =~ s/\{\{allelic_ratio_content\}\}/$allelic_ratio_content/g;
	$doc =~ s/\{\{strain_names_ratio_plotly\}\}/$strain_names_ratio_plotly/g;
	$doc =~ s/\{\{strain1_ratio_y_plotly\}\}/$strain1_ratio_plotly/g;
	$doc =~ s/\{\{strain2_ratio_y_plotly\}\}/$strain2_ratio_plotly/g;

  	warn "="x110,"\n\n\n";
  	$verbose and sleep(3);

	write_out_report($report_output,$doc);
	
}

sub write_out_report{
  my ($report_output,$doc) = @_;
  open (OUT,'>',$report_output) or die "Failed to write to output file $report_output: $!\n\n";
  print OUT $doc;
}

sub getLoggingTime {
  my $doc = shift;
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);

  my $time = sprintf ("%02d:%02d:%02d", $hour,$min,$sec);
  my $date = sprintf ("%04d-%02d-%02d", $year+1900,$mon+1,$mday);
  warn "Using Time: $time, and date: $date\n\n" if ($verbose);

  $doc =~ s/\{\{date\}\}/$date/g;
  $doc =~ s/\{\{time\}\}/$time/g;

  return $doc;
}


sub read_rSO_summary_report{

  my ($summary_report,$doc) = @_;

  warn "Processing reStrainingOrder summary report $summary_report ...\n";
  open (SUMM,$summary_report) or die "Couldn't read from file $summary_report: $!\n\n";

  my $unique;
  my $no_aln;
  my $multiple;
  my $no_genomic;
  my $total_seqs;
  my $bismark_version;
  my $input_filename;

  my $unique_text;
  my $no_aln_text;
  my $multiple_text;
  my $total_seq_text;

  my $total_C_count;
  my ($meth_CpG,$meth_CHG,$meth_CHH,$meth_unknown);
  my ($unmeth_CpG,$unmeth_CHG,$unmeth_CHH,$unmeth_unknown);
  my ($perc_CpG,$perc_CHG,$perc_CHH,$perc_unknown);

  my $number_OT;
  my $number_CTOT;
  my $number_CTOB;
  my $number_OB;

  my $processed_strain_scores;
  my $processed_hybrid_scores;
  my $processed_allele_ratios;


  	my $strain_order = 0;
	my $hybrid_order = 0;
	my $allele_ratio_order = 0;

  while (<SUMM>){
    chomp;
   
    unless (defined $processed_strain_scores){
    	# this must the first line
    	if($_ eq 'STRAIN SCORES'){
    		# warn "Fine, this looks like a proper reStrainingOrder summary report\n";
    		++$processed_strain_scores;
    		next;
    	}
    	else{
    		die "This file does not look like a reStrainingOrder summary report. Aborting... (First line was: >$_<\n\n ";
    	}
    }
	# warn "$_\n";

	if ($_ eq ""){
    	# warn "Line is empty: skipping\n\n";
    	next;
    }

    if (defined $processed_hybrid_scores){
    	# warn "Now processing the Hybrid Scores section\n";
    	# this has to be Section 1: Strain Scores
		
		if (defined $processed_allele_ratios){
			# this has to be Section 3: Allele Ratios
			# warn "ALLELE RATIOS: $_\n"; # sleep(1);
			if ($_ =~ /^Strain1/){
    			# warn "Header, skipping...: $_\n"; sleep(1);
   				next; # header
   			}
	   		else{
   				my ($strain1,$strain1_count,$strain1_percent,$strain2,$strain2_count,$strain2_percent) = (split /\t/);
    			++$allele_ratio_order;

    			print join (" // ",$allele_ratio_order,$strain1,$strain2_count,$strain1_percent,$strain2,$strain2_count,$strain2_percent),"\n" if $verbose; # sleep(1);
  	 			$allele_ratios{$allele_ratio_order}->{strain1} = $strain1;
   				$allele_ratios{$allele_ratio_order}->{strain2} = $strain2;
   				$allele_ratios{$allele_ratio_order}->{strain1_count} = $strain1_count;	
	   			$allele_ratios{$allele_ratio_order}->{strain2_count} = $strain2_count;
	   			$allele_ratios{$allele_ratio_order}->{strain1_percent} = $strain1_percent;
	   			$allele_ratios{$allele_ratio_order}->{strain2_percent} = $strain2_percent;	
   			}

		}
		else{
			if ($_ eq 'ALLELE RATIOS'){
	    		# warn "Reached the Allele Ratio section\n";
	    		# sleep(1);
	    		++$processed_allele_ratios;
	    		next;
	   		}
	   		else{
	   			# this has to be Section 2: Hybrid Scores					
    			# warn "HYBRID SCORES: $_\n";
    			
    			if ($_ =~ /^Potential/){
    				# warn "Header, skipping...\n";
   					next; # header
   				}
	   			else{
	   				my ($hybrid,$agree,$disagree,$percent,$strain1_index,$strain2_index) = (split /\t/);
	    			++$hybrid_order;

	    			print join (" // ",$hybrid_order,$hybrid,$agree,$disagree,$percent,$strain1_index,$strain2_index),"\n" if $verbose; # sleep(1);
	  	 			$hybrid_scores{$hybrid_order}->{hybrid} = $hybrid;
	   				$hybrid_scores{$hybrid_order}->{strain1_index} = $strain1_index;
	   				$hybrid_scores{$hybrid_order}->{strain2_index} = $strain2_index;
	   				$hybrid_scores{$hybrid_order}->{agree} = $agree;
	   				$hybrid_scores{$hybrid_order}->{disagree} = $disagree;
	   				$hybrid_scores{$hybrid_order}->{percent} = $percent;
	   			}
	   		}
   		}
   	}
    else{
		# this has to be Section 1: Strain Scores
		if ($_ eq 'HYBRID SCORES'){
    		# warn "Reached the Hybrid Score section\n";
    		++$processed_hybrid_scores;
    		next;
   		}
   		else{
   			# warn "STRAIN SCORES: $_\n";		
   			if ($_ =~ /^Strain/){
   				# warn "Header, skipping...\n";
   				next; # header
   			}
   			else{
   				my ($strain,$covered,$agree,$disagree,$percent) = (split /\t/);
   				++$strain_order;
   				print join (" // ",$strain_order,$strain,$covered,$agree,$disagree,$percent),"\n" if $verbose; # sleep(1);
   				$strain_scores{$strain_order}->{strain} = $strain;
   				$strain_scores{$strain_order}->{covered} = $covered;
   				$strain_scores{$strain_order}->{agree} = $agree;
   				$strain_scores{$strain_order}->{disagree} = $disagree;
   				$strain_scores{$strain_order}->{percent} = $percent;
   			}
   		}
   	}
  }

  warn "Complete\n\n";
  return $doc;

}


sub read_report_template{
    my $template = shift;
    my $doc;
    warn "Attempting to open file from: $RealBin/plotly/$template\n\n" if ($verbose);
    open (DOC,"$RealBin/plotly/$template") or die "Failed to find file $template: $!";
    while(<DOC>){
		chomp;
		$_ =~ s/\r//g;
		$doc .= $_."\n";
    }
    
    close DOC or warn $!;
    return $doc;
}



sub process_commandline{
	my $help;
	my $output_dir;
	my $manual_output_file;
	my $summary_report;
	my $candidates;
	my $verbose;

	my $version;
	
	my $command_line = GetOptions ('help|man'              => \$help,
				 'dir=s'                 => \$output_dir,
				 'o|output=s'            => \$manual_output_file,
				 'summary_report=s'      => \$summary_report,
				 'version'               => \$version,
				 'candidates=i'          => \$candidates,
				 'verbose'               => \$verbose,
				);

	### EXIT ON ERROR if there were errors with any of the supplied options
	unless ($command_line){
		die "Please re-specify command line options\n";
	}

	### HELPFILE
	if ($help){
		print_helpfile();
		exit;
	}

	if ($version){
		print << "VERSION";

                              reStrainingOrder HTML Report Module
                                    version: $report_version

                     Copyright 2018-19 Felix Krueger, Babraham Bioinformatics
                            https://github.com/FelixKrueger/Bismark
	
VERSION
		exit;
	}

	### OUTPUT DIR PATH
	if (defined $output_dir){
		unless ($output_dir eq ''){ # if the output dir has been passed on by the methylation extractor and is an empty string we don't want to change it
			unless ($output_dir =~ /\/$/){
				$output_dir =~ s/$/\//;
			}
		}
	}
	else{
		$output_dir = '';
	}	


	## First we are looking for alignment reports, and then look whether there are any optional plots with the same base name

	if ($summary_report){
		### we only process the one alignment report (and possibly the other ones as well) that was specified
		push @reStrainingOrder_summary_reports, $summary_report;
	}
	else{ ### no alignment report specified, looking in the current directory for files ending in *E_report.txt (SE or PE)

		### looking in the current directory for report files. Less than 1 report file is not allowed
		@reStrainingOrder_summary_reports = <*reStrainingOrder.summary_stats.txt>;

		if (scalar @reStrainingOrder_summary_reports == 0){
			warn "Found no potential reStrainingOrder summary reports in the current directory. Please specify a single reStrainingOrder summary report file using the option '--summary_report FILE'\n\n";
			print_helpfile();
			exit;
		}
		else{
			# there are reStrainingOrder summary report(s) in the directory
			warn "Found ",scalar @reStrainingOrder_summary_reports," summary reports in current directory. Now processing all of them.\n";
		}
	}

	### Ensuring that there isn't more than 1 file in @reStrainingOrder_summary_reports if someone manually specified an output file.
	if (scalar @reStrainingOrder_summary_reports > 1){
		if (defined $manual_output_file){
			die "You cannot run reStrainingReport on more than 1 file while specifying a single output file. Either lose the option -o to derive the output filenames automatically, or specify a single reStrainingOrder summary report file using the option '--summary_report FILE'\n\n";
		}
	}

	if (defined $candidates){
		unless ($candidates > 0 and $candidates <= 30){
			die "Please select a number of candidates between 1 and 30 (the default is 10) and try again\n";
		}
		warn "Reporting >>$candidates<< potential hybrid combinations [user defined]\n";
	}
	else{
		# the default number of candidates is 10
		$candidates = 30;
		warn "Reporting >>$candidates<< potential hybrid combinations [default]\n";
	}
	return ($output_dir,$verbose,$manual_output_file,$candidates);

}

sub print_helpfile{
  print <<EOF

  SYNOPSIS:

  This script uses a Bismark alignment report to generate a graphical HTML report page. Optionally, further reports of
  the Bismark suite such as deduplication, methylation extractor splitting or M-bias reports can be specified as well. If several
  Bismark reports are found in the same folder, a separate report will be generated for each of these, whereby the output filename
  will be derived from the Bismark alignment report file. bismark2report attempts to find optional reports automatically based
  on the file basename.


  USAGE: bismark2report [options]


-o/--output <filename>     Name of the output file (optional). If not specified explicitly, the output filename will be derived
                           from the Bismark alignment report file. Specifying an output filename only works if the HTML report is
                           to be generated for a single Bismark alignment report (and potentially additional reports).

--dir                      Output directory. Output is written to the current directory if not specified explicitly.


--alignment_report FILE    If not specified explicitly, bismark2report attempts to find Bismark report file(s) in the current
                           directory and produces a separate HTML report for each mapping report file. Based on the basename of
                           the Bismark mapping report, bismark2report will also attempt to find the other Bismark reports (see below)
                           for inclusion into the HTML report. Specifying a Bismark alignment report file is mandatory.


                           Script last modified: 21 July 2019

EOF
    ;
  exit 1;
}

